---

- name: Update apt sources
  apt:
    update_cache: yes
    cache_valid_time: 3600
  register: apt_update
  until: apt_update|success
  retries: 5
  delay: 2
  when: ansible_os_family == "Debian"
  tags: 
    - packages
    - ubuntu

- name: Install  Packages
  apt: name={{ item }} state=present
  with_items:
    - vlan
    - bridge-utils
    - ifupdown-extra
    - git
  when: ansible_os_family == "Debian"
  tags:
    - packages
    - ubuntu

- name: Install Pip
  apt: name={{ item }} state=present
  with_items:
    - python-pip
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("controller1"))
  tags:
    - pip
    - ubuntu

- name: Upgrade Pip
  shell: pip install --upgrade pip
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("controller1"))
  tags:
    - pip
    - ubuntu 

- name: Install PyYAML
  pip:
    name: pyyaml
    executable: /usr/local/bin/pip
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("controller1"))
  tags:
    - packages
    - pip

- name: Upgrade CentOS
  yum:
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat"
  tags:
    - upgrade
    - upgrade_centos
    - centos

- name: Upgrade Ubuntu
  apt: upgrade=dist
  when: ansible_os_family == "Debian"
  tags:
    - upgrade
    - upgrade_ubuntu
    - ubuntu

- name: Extract the last octet of mgmt network
  set_fact: octet={{ansible_eth3.ipv4.address.split('.')[3]}}
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu

- name: Extract the Rackspace Gateway for ServiceNet Network
  shell: "netstat -r | grep {{ service_net_address }} | awk '{print $2}'"
  register: service_net_gw
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu

- name: Debug ServiceNet GW
  debug: 
    var: service_net_gw.stdout
    verbosity: 2
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu


### Added Bind so the controllers are now be the DNS Servers - IPs are referenced in vars.yml
# - name: Extract the DNS Servers
#   shell: cat /etc/network/interfaces | grep -m 1 dns-nameservers | awk '{print $2 " " $3}'
#   register: dns_servers
#   when: ansible_br_mgmt is not defined
#   tags:
#     - networking
#     - ubuntu

- name: Construct DNS Servers Fact (eth)
  set_fact:
    dns_servers: "{{hostvars['controller1']['ansible_eth3']['ipv4']['address']}} {{hostvars['controller2']['ansible_eth3']['ipv4']['address']}} {{hostvars['controller3']['ansible_eth3']['ipv4']['address']}}"
  when: ansible_br_mgmt is not defined 
  tags:
    - networking
    - ubuntu
    - bind

- name: Construct DNS Servers Fact (br_mgmt)
  set_fact:
    dns_servers: "{{hostvars['controller1']['ansible_br_flat']['ipv4']['address']}} {{hostvars['controller2']['ansible_br_flat']['ipv4']['address']}} {{hostvars['controller3']['ansible_br_flat']['ipv4']['address']}}"
  when: ansible_br_mgmt is defined 
  tags:
    - networking
    - ubuntu
    - bind

- name: Debug DNS Servers
  debug: 
    var: dns_servers
    verbosity: 2
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu
    - bind

- name: Configure GW Bridges
  template:
    src: files/interfaces-gw
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("gw")) and (ansible_br_mgmt is not defined)
  register: bridges_gw
  tags:
    - networking
    - ubuntu 
    - gw

- name: Debug Networking GW
  debug: 
    var: bridges_gw.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("gw"))
  tags:
    - networking
    - ubuntu 
    - gw

# # generates the reboot-required.pkgs
# # used just for testing reboot code which follows
# # comment out once working
# - name: Generate reboot file
#   copy:
#     src: files/reboot-required.pkgs
#     dest: /var/run/reboot-required.pkgs
#   tags:
#     - test
#     - networking

- name: Is Reboot Required
  stat: 
    path: /var/run/reboot-required.pkgs
  register: stat_result
  tags:
    - upgrade
    - networking

- name: GW Reboot Required?
  debug:
    msg: "GW Reboot required"
  when: (inventory_hostname is search("gw")) and (stat_result.stat.exists == True) or (inventory_hostname is search("gw")) and (bridges_gw.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart GW
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname is search("gw")) and (stat_result.stat.exists == True) or (inventory_hostname is search("gw")) and (bridges_gw.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for GW Node to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname is search("gw")) and (stat_result.stat.exists == True) or (inventory_hostname is search("gw")) and (bridges_gw.changed == true)
  tags:
    - upgrade
    - networking

- name: Sending a status update e-mail
  mail:
    host: '{{ host }}'
    port: '{{ port }}'
    secure:  '{{ secure }}'
    username: '{{ username }}'
    password: '{{ password }}'
    from: '{{ from }}'
    to: '{{ to }}'
    subject: '{{ subject_prefix }} GW VM Prepared'
    body: GW VM has been successfully prepared
  run_once: true
  when: send_mail | bool
  tags:
    - mail

################################### VPN GW IP start #########################################
##### Following section is a very convoluted way of identifying the correct ip of 
##### the VPN GW, required as there are issues setting it reliably as it changes
##### as part of this playbook and some nodes detect it OK, but others do not.  
##### The IP required is initially linked to eth5, but following reboot of GW it is then
##### liked to br_flat however the change is not always detected on the first run on this play.
##### There must be a better way of doing this, but for now this appears to work
#############################################################################################

# - name: Remove GW Cache file # required to clear GW Facts as next step was not refreshing them
#   become: no
#   delegate_to: 127.0.0.1
#   run_once: true
#   shell: rm -f -r /tmp/facts_cache/gw
#   tags:
#     - networking
#     - ubuntu
#     - vpn
#     - facts
#     - routes


# - name: Gather updated network facts from GW
#   setup:
#   delegate_to: 127.0.0.1
#   become: no
#   # delegate_to: "{{item}}"
#   # run_once: true
#   with_items: gw
#   # when: hostvars[item]['ansible_br_flat_ipv4'] is not defined
#   tags: 
#     - networking
#     - ubuntu
#     - vpn
#     - facts
#     - routes

- name: Clear Facts # just clearing the GW facts file (above) was not sufficient
  meta: clear_facts
  tags:
    - networking
    - ubuntu
    - vpn
    - facts

- name: Refresh Facts
  become: no
  delegate_to: 127.0.0.1
  run_once: true
  shell: ansible all -m setup
  tags:
    - networking
    - ubuntu
    - vpn
    - facts

- name: Debug ansible_br_flat
  debug:
    var: hostvars['gw']['ansible_br_flat']['ipv4']['address']
    verbosity: 2
  tags:
    - networking
    - ubuntu
    - vpn
    - facts

- name: Debug ansible_eth5
  debug:
    var: hostvars['gw']['ansible_eth5']['ipv4']['address']
    verbosity: 2
  tags:
    - networking
    - ubuntu
    - vpn
    - facts

- name: Set VPN GW Fact (br_flat)
  set_fact:
    vpn_gw_br_flat: "{{hostvars['gw']['ansible_br_flat']['ipv4']['address']}}"
  ignore_errors: yes
  tags:
    - networking
    - ubuntu
    - vpn
    - facts

- name: Debug VPN GW Fact (br_flat)
  debug:
    var: vpn_gw_br_flat
    verbosity: 2
  tags:
    - networking
    - ubuntu
    - vpn
    - facts

- name: Set VPN GW Fact (eth5)
  set_fact:
    vpn_gw_eth5: "{{hostvars['gw']['ansible_eth5']['ipv4']['address']}}"
  ignore_errors: yes
  tags:
    - networking
    - ubuntu
    - vpn
    - facts

- name: Debug VPN GW Fact (eth5)
  debug:
    var: vpn_gw_eth5
    verbosity: 2
  tags:
    - networking
    - ubuntu
    - vpn

- name: Set VPN GW (eth5)
  set_fact:
    vpn_gw: "{{vpn_gw_eth5}}"
  when: vpn_gw_br_flat is undefined
  tags:
    - networking
    - ubuntu
    - vpn

- name: Set VPN GW (br_flat)
  set_fact:
    vpn_gw: "{{vpn_gw_br_flat}}"
  when: vpn_gw_eth5 is undefined
  tags:
    - networking
    - ubuntu
    - vpn

################################### VPN GW IP end #########################################

- name: Add routes file to controllers
  template:
    src: files/routes
    dest: /etc/network/routes
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("controller"))
  tags:
    - networking
    - ubuntu
    - vpn

- name: Configure Controller Bridges
  template:
    src: files/interfaces-controller
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("controller")) and (ansible_br_mgmt is not defined)
  register: bridges_controller
  tags:
    - networking
    - ubuntu

- name: Add routes file to compute nodes
  template:
    src: files/routes
    dest: /etc/network/routes
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("compute"))
  tags:
    - networking
    - ubuntu
    - vpn

- name: Configure Compute Bridges
  template:
    src: files/interfaces-compute
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("compute")) and (ansible_br_mgmt is not defined)
  register: bridges_compute
  tags:
    - networking
    - ubuntu

- name: Configure Ceph Bridges
  template:
    src: files/interfaces-ceph
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("ceph")) and (ansible_br_mgmt is not defined)
  register: bridges_ceph
  tags:
    - networking
    - ubuntu

- name: Configure Swift Bridges
  template:
    src: files/interfaces-swift
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("swift")) and (ansible_br_mgmt is not defined)
  register: bridges_swift
  tags:
    - networking
    - ubuntu

- name: Configure LB Bridges
  template:
    src: files/interfaces-lb
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("lb")) and (ansible_br_mgmt is not defined)
  register: bridges_lb
  tags:
    - networking
    - ubuntu

- name: Add routes file to console
  template:
    src: files/routes
    dest: /etc/network/routes
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("console"))
  tags:
    - networking
    - ubuntu
    - vpn

- name: Configure Console Bridges
  template:
    src: files/interfaces-console
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("console")) and (ansible_br_mgmt is not defined)
  register: bridges_console
  tags:
    - networking
    - ubuntu

- name: Debug Networking Controller
  debug: 
    var: bridges_controller.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("controller"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Compute
  debug: 
    var: bridges_compute.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("compute"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Ceph
  debug: 
    var: bridges_ceph.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("ceph"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Swift
  debug: 
    var: bridges_swift.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("swift"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Console
  debug: 
    var: bridges_console.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname is search("console"))
  tags:
    - networking
    - ubuntu

## generates the reboot-required.pkgs
## used just for testing reboot code which follows
## comment out once working
# - name: Generate reboot file
#   copy:
#     src: files/reboot-required.pkgs
#     dest: /var/run/reboot-required.pkgs
#   tags:
#     - test

- name: Sending a status update e-mail
  mail:
    host: '{{ host }}'
    port: '{{ port }}'
    secure:  '{{ secure }}'
    username: '{{ username }}'
    password: '{{ password }}'
    from: '{{ from }}'
    to: '{{ to }}'
    subject: '{{ subject_prefix }} Starting Reboots'
    body: Starting reboots of all nodes
  run_once: true
  when: send_mail | bool
  tags:
    - mail

- name: Is Reboot Required
  stat: 
    path: /var/run/reboot-required.pkgs
  register: stat_result
  tags:
    - upgrade
    - networking

- name: Test stat results
  debug:
    var: stat_result
    verbosity: 2
  tags:
    - upgrade
    - networking

- name: Controller Reboot Required?
  debug:
    msg: "Controller Reboot required"
  when: ((inventory_hostname is search("controller")) and (stat_result.stat.exists == True)) or ((inventory_hostname is search("controller")) and (bridges_controller.changed == true))
  tags:
    - upgrade
    - networking

- name: Compute Reboot Required?
  debug:
    msg: "Compute Reboot required"
  when: (inventory_hostname is search("compute")) and (stat_result.stat.exists == True) or (inventory_hostname is search("compute")) and (bridges_compute.changed == true)
  tags:
    - upgrade
    - networking

- name: Ceph Reboot Required?
  debug:
    msg: "Ceph Reboot required"
  when: (inventory_hostname is search("ceph")) and (stat_result.stat.exists == True) or (inventory_hostname is search("ceph")) and (bridges_ceph.changed == true)
  tags:
    - upgrade
    - networking

- name: LB Reboot Required?
  debug:
    msg: "LB Reboot required"
  when: (inventory_hostname is search("lb")) and (stat_result.stat.exists == True) or (inventory_hostname is search("lb")) and (bridges_lb.changed == true)
  tags:
    - upgrade
    - networking

- name: Swift Reboot Required?
  debug:
    msg: "Swift Reboot required"
  when: (inventory_hostname is search("swift")) and (stat_result.stat.exists == True) or (inventory_hostname is search("swift")) and (bridges_swift.changed == true)
  tags:
    - upgrade
    - networking

- name: Console Reboot Required?
  debug:
    msg: "Console Reboot required"
  when: (inventory_hostname is search("console")) and (stat_result.stat.exists == True) or (inventory_hostname is search("console")) and (bridges_console.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart Controller
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname is search("controller")) and (stat_result.stat.exists == True) or (inventory_hostname is search("controller")) and (bridges_controller.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart Compute
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname is search("compute")) and (stat_result.stat.exists == True) or (inventory_hostname is search("compute")) and (bridges_compute.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart Ceph
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname is search("ceph")) and (stat_result.stat.exists == True) or (inventory_hostname is search("ceph")) and (bridges_ceph.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart LB
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname is search("lb")) and (stat_result.stat.exists == True) or (inventory_hostname is search("lb")) and (bridges_lb.changed == true)
  tags:
    - upgrade

- name: Restart Swift
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname is search("swift")) and (stat_result.stat.exists == True) or (inventory_hostname is search("swift")) and (bridges_swift.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart Console
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname is search("console")) and (stat_result.stat.exists == True) or (inventory_hostname is search("console")) and (bridges_console.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Controller Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname is search("controller")) and (stat_result.stat.exists == True) or (inventory_hostname is search("controller")) and (bridges_controller.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Compute Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname is search("compute")) and (stat_result.stat.exists == True) or (inventory_hostname is search("compute")) and (bridges_compute.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Ceph Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
<<<<<<< HEAD
  when: (inventory_hostname is search("Ceph")) and (stat_result.stat.exists == True) or (inventory_hostname is search("Ceph")) and (bridges_Ceph.changed == true)
=======
  when: (inventory_hostname | search("ceph")) and (stat_result.stat.exists == True) or (inventory_hostname | search("ceph")) and (bridges_ceph.changed == true)
>>>>>>> master
  tags:
    - upgrade
    - networking

- name: Wait for LB Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname is search("lb")) and (stat_result.stat.exists == True) or (inventory_hostname is search("lb")) and (bridges_lb.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Swift Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname is search("swift")) and (stat_result.stat.exists == True) or (inventory_hostname is search("swift")) and (bridges_swift.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Console Node to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname is search("console")) and (stat_result.stat.exists == True) or (inventory_hostname is search("console")) and (bridges_console.changed == true)
  tags:
    - upgrade
    - networking

- name: Sending a status update e-mail
  mail:
    host: '{{ host }}'
    port: '{{ port }}'
    secure:  '{{ secure }}'
    username: '{{ username }}'
    password: '{{ password }}'
    from: '{{ from }}'
    to: '{{ to }}'
    subject: '{{ subject_prefix }} Reboots Completed'
    body: All nodes have been rebooted
  run_once: true
  when: send_mail | bool
  tags:
    - mail

- name: Install openstack-selinux
  package:
    name: openstack-selinux
    state: present
  when: ansible_os_family == "RedHat"
  tags:
    - redhat